---
- name: Remove old application files
  file:
     path: "{{ tomcat.home }}/{{ tomcat.war.dest }}/{{ tomcat.war.name }}.war"
     state: absent

- name: delete dir application
  file:
    dest: "{{ tomcat.home }}/{{ tomcat.war.dest }}/{{ tomcat.war.name }}"
    state: absent

-  name: downloading new war file (local)
   get_url:
       url: "{{ maven_artifact.artifactory_url }}/{{  maven_artifact.repository_name }}/{{ branch }}/{{ release_version }}/{{ tomcat.war.name }}.war"
       url_username: "{{ maven_artifact.username }}"
       url_password: "{{ maven_artifact.password }}"
       dest: "{{ maven_artifact.dest }}/{{ tomcat.war.name }}.war"
   delegate_to: localhost

- name: Copy ab application WAR file to host
  copy:
     src:  "{{ tomcat.war.name }}.war"
     dest: "{{ tomcat.home }}/{{ tomcat.war.dest }}"
     owner: "{{ tomcat.owner }}"
     group: "{{ tomcat.group }}"

- name: copy logrotate rule
  template:
    src: template/logrotate.j2
    dest: "{{ tomcat.log.rotatedest }}"
    owner: root
    group: root

- name: rotating current catalina log
  command: logrotate -f "{{ tomcat.log.rotatedest }}"
  ignore_errors: true

- name: Start ab Tomcat service 
  systemd:
     state: started
     name: "{{ tomcat.systemd_name }}"
  become: true
  register: state
  ignore_errors: true

- name: waiting for ready
  wait_for: 
    path: "{{ tomcat.home }}/{{ tomcat.log.dest }}/{{ tomcat.log.name }}"
    search_regex: "{{ tomcat.log.start_success }}|{{ tomcat.log.start_failed }}"
    timeout: "{{ max_wait_time }}"

- name: head catalina.out
  command: "head -400 {{ tomcat.home }}/{{ tomcat.log.dest }}/{{ tomcat.log.name }}"
  register: result_cat
  run_once: true

- name: Print catalina.out
  debug:
    msg: "{{ result_cat.stdout.split('\n') }}"
  when: result_cat is changed

- name: Grep catalina.out 
  command: "grep -C {{ strings_count }} \"{{ tomcat.log.start_failed }}\" {{ tomcat.home }}/{{ tomcat.log.dest }}/{{ tomcat.log.name }}"
  register: result_grep
  failed_when: result_grep.stdout != "" 


